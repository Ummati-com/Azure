{
  // https://github.com/Azure/azure-resource-manager-schemas
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "environment": {
      "metadata": {
        "description": "The name of the environment."
      },
      "type": "string"
    },
    // Azure Key Vault
    "key_vault_name": {
      "metadata": {
        "description": "Name of the Vault"
      },
      "type": "string"
    },
    "key_vault_location": {
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The location of the key vault resource."
      },
      "type": "string"
    },
    "key_vault_tenantId": {
      "defaultValue": "[subscription().tenantId]",
      "metadata": {
        "description": "Tenant Id of the subscription. Get using Get-AzureRmSubscription cmdlet or Get Subscription API"
      },
      "type": "string"
    },
    "key_vault_objectId": {
      "metadata": {
        "description": "Object Id of the AD user. Get using Get-AzureRmADUser or Get-AzureRmADServicePrincipal cmdlets"
      },
      "type": "string"
    },
    "key_vault_certificatesPermissions": {
      "defaultValue": [
        "list"
      ],
      "metadata": {
        "description": "Permissions to certificates in the vault."
      },
      "type": "array"
    },
    "key_vault_keysPermissions": {
      "defaultValue": [
        "list"
      ],
      "metadata": {
        "description": "Permissions to keys in the vault. Valid values are: all, create, import, update, get, list, delete, backup, restore, encrypt, decrypt, wrapkey, unwrapkey, sign, and verify."
      },
      "type": "array"
    },
    "key_vault_secretsPermissions": {
      "defaultValue": [
        "list"
      ],
      "metadata": {
        "description": "Permissions to secrets in the vault. Valid values are: all, get, set, list, and delete."
      },
      "type": "array"
    },
    "key_vault_networkAcls": {
      "metadata": {
        "description": "The network firewall defined for this vault."
      },
      "type": "object"
    },
    "key_vault_sku": {
      "allowedValues": [
        "Standard",
        "Premium"
      ],
      "defaultValue": "Standard",
      "metadata": {
        "description": "SKU for the vault"
      },
      "type": "string"
    },
    "key_vault_enabledForDeployment": {
      "allowedValues": [
        true,
        false
      ],
      "defaultValue": false,
      "metadata": {
        "description": "Specifies if the vault is enabled for a VM deployment"
      },
      "type": "bool"
    },
    "key_vault_enabledForDiskEncryption": {
      "allowedValues": [
        true,
        false
      ],
      "defaultValue": false,
      "metadata": {
        "description": "Specifies if the azure platform has access to the vault for enabling disk encryption scenarios."
      },
      "type": "bool"
    },
    "key_vault_enabledForTemplateDeployment": {
      "allowedValues": [
        true,
        false
      ],
      "defaultValue": false,
      "metadata": {
        "description": "Specifies whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
      },
      "type": "bool"
    },
    "key_vault_enableSoftDelete": {
      "allowedValues": [
        true,
        false
      ],
      "defaultValue": true,
      "metadata": {
        "description": "Property to specify whether the 'soft delete' functionality is enabled for this key vault. It does not accept false value."
      },
      "type": "bool"
    },
    "key_vault_enablePurgeProtection": {
      "allowedValues": [
        true,
        false
      ],
      "defaultValue": true,
      "metadata": {
        "description": "Property specifying whether protection against purge is enabled for this vault. Setting this property to true activates protection against purge for this vault and its content - only the Key Vault service may initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is also enabled. Enabling this functionality is irreversible - that is, the property does not accept false as its value."
      },
      "type": "bool"
    },
    // Azure Container Registry
    "container_registry_name": {
      "type": "string"
    },
    "container_registry_location": {
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The location of the container registry resource."
      },
      "type": "string"
    },
    "container_registry_sku": {
      "allowedValues": [
        "Basic",
        "basic",
        "Standard",
        "standard",
        "Premium",
        "premium"
      ],
      "defaultValue": "basic",
      "metadata": {
        "description": "SKU for the container registry"
      },
      "type": "string"
    }
  },
  "variables": {
    "container_registry_resourceId": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('container_registry_name'))]",
    "key_vault_resourceId": "[resourceId('Microsoft.KeyVault/vaults', parameters('key_vault_name'))]"
  },
  "resources": [
    {
      // https://docs.microsoft.com/en-us/azure/templates/microsoft.keyvault/2018-02-14/vaults
      "comments": "Azure Key Vault",
      "type": "Microsoft.KeyVault/vaults",
      "name": "[parameters('key_vault_name')]",
      "apiVersion": "2018-02-14",
      "location": "[parameters('key_vault_location')]",
      "properties": {
        "enabledForDeployment": "[parameters('key_vault_enabledForDeployment')]",
        "enabledForDiskEncryption": "[parameters('key_vault_enabledForDiskEncryption')]",
        "enabledForTemplateDeployment": "[parameters('key_vault_enabledForTemplateDeployment')]",
        "enableSoftDelete": "[parameters('key_vault_enableSoftDelete')]",
        "enablePurgeProtection": "[parameters('key_vault_enablePurgeProtection')]",
        "tenantId": "[parameters('key_vault_tenantId')]",
        "accessPolicies": [
          {
            "tenantId": "[parameters('key_vault_tenantId')]",
            "objectId": "[parameters('key_vault_objectId')]",
            "permissions": {
              "certificates": "[parameters('key_vault_certificatesPermissions')]",
              "keys": "[parameters('key_vault_keysPermissions')]",
              "secrets": "[parameters('key_vault_secretsPermissions')]"
            }
          }
        ],
        "networkAcls": "[parameters('key_vault_networkAcls')]",
        "sku": {
          "name": "[parameters('key_vault_sku')]",
          "family": "A"
        }
      },
      "tags": {
        "Environment": "[parameters('environment')]"
      }
    },
    {
      // https://docs.microsoft.com/en-us/azure/templates/microsoft.keyvault/allversions
      "comments": "Azure Key Vault Secret (Azure Container Registry Name)",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(parameters('key_vault_name'), '/AzureContainerRegistryName')]",
      "apiVersion": "2018-02-14",
      "dependsOn": [
        "[variables('container_registry_resourceId')]",
        "[variables('key_vault_resourceId')]"
      ],
      "properties": {
        "contentType": "text/plain",
        "value": "[parameters('container_registry_name')]"
      }
    },
    {
      // https://docs.microsoft.com/en-us/azure/templates/microsoft.keyvault/allversions
      "comments": "Azure Key Vault Secret (Azure Container Registry Server)",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(parameters('key_vault_name'), '/AzureContainerRegistryServer')]",
      "apiVersion": "2018-02-14",
      "dependsOn": [
        "[variables('container_registry_resourceId')]",
        "[variables('key_vault_resourceId')]"
      ],
      "properties": {
        "contentType": "text/plain",
        "value": "[reference(variables('container_registry_resourceId'), '2019-05-01').loginServer]"
      }
    },
    {
      // https://docs.microsoft.com/en-us/azure/templates/microsoft.keyvault/allversions
      "comments": "Azure Key Vault Secret (Azure Container Registry Username)",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(parameters('key_vault_name'), '/AzureContainerRegistryUsername')]",
      "apiVersion": "2018-02-14",
      "dependsOn": [
        "[variables('container_registry_resourceId')]",
        "[variables('key_vault_resourceId')]"
      ],
      "properties": {
        "contentType": "text/plain",
        "value": "[listCredentials(variables('container_registry_resourceId'), '2019-05-01').username]"
      }
    },
    {
      // https://docs.microsoft.com/en-us/azure/templates/microsoft.keyvault/allversions
      "comments": "Azure Key Vault Secret (Azure Container Registry Password 1)",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(parameters('key_vault_name'), '/AzureContainerRegistryPassword1')]",
      "apiVersion": "2018-02-14",
      "dependsOn": [
        "[variables('container_registry_resourceId')]",
        "[variables('key_vault_resourceId')]"
      ],
      "properties": {
        "contentType": "text/plain",
        "value": "[listCredentials(variables('container_registry_resourceId'), '2019-05-01').passwords[0].value]"
      }
    },
    {
      // https://docs.microsoft.com/en-us/azure/templates/microsoft.keyvault/allversions
      "comments": "Azure Key Vault Secret (Azure Container Registry Password 2)",
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(parameters('key_vault_name'), '/AzureContainerRegistryPassword2')]",
      "apiVersion": "2018-02-14",
      "dependsOn": [
        "[variables('container_registry_resourceId')]",
        "[variables('key_vault_resourceId')]"
      ],
      "properties": {
        "contentType": "text/plain",
        "value": "[listCredentials(variables('container_registry_resourceId'), '2019-05-01').passwords[1].value]"
      }
    },
    {
      // https://docs.microsoft.com/en-us/azure/templates/microsoft.containerregistry/2019-05-01/registries
      "comments": "Azure Container Registry",
      "type": "Microsoft.ContainerRegistry/registries",
      "name": "[parameters('container_registry_name')]",
      "apiVersion": "2019-05-01",
      "location": "[parameters('container_registry_location')]",
      "sku": {
        "name": "[parameters('container_registry_sku')]"
      },
      "scale": null,
      "dependsOn": [],
      "properties": {
        "adminUserEnabled": true
      },
      "tags": {
        "Environment": "[parameters('environment')]"
      }
    }
  ],
  "outputs": {
    "container_registry_server": {
      "type": "string",
      "value": "[reference(variables('container_registry_resourceId'), '2019-05-01').loginServer]"
    },
    "container_registry_username": {
      "type": "securestring",
      "value": "[listCredentials(variables('container_registry_resourceId'), '2019-05-01').username]"
    },
    "container_registry_password1": {
      "type": "securestring",
      "value": "[listCredentials(variables('container_registry_resourceId'), '2019-05-01').passwords[0].value]"
    },
    "container_registry_password2": {
      "type": "securestring",
      "value": "[listCredentials(variables('container_registry_resourceId'), '2019-05-01').passwords[1].value]"
    }
  }
}
